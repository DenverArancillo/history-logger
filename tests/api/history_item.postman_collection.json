{
	"info": {
		"_postman_id": "acc58410-ce91-4a5c-a4b5-782650b9e598",
		"name": "history_item",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7884085"
	},
	"item": [
		{
			"name": "POST history_item",
			"item": [
				{
					"name": "Create history item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect } = pm\r",
									"\r",
									"test('should have status code 201', () => {\r",
									"    response.to.have.status(201)\r",
									"})\r",
									"\r",
									"test('should have correct properties in response body', () => {\r",
									"    expect(response.json()).to.have.property('id')\r",
									"    expect(response.json()).to.have.property('history_item_name')\r",
									"    expect(response.json()).to.have.property('history_item_type')\r",
									"    expect(response.json()).to.have.property('message')\r",
									"})\r",
									"\r",
									"// save new tag id in environment\r",
									"pm.environment.set('test_history_item_id', response.json().id)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const range = (min, max) => {\r",
									"    return Math.floor(Math.random() * (max - min) + min)\r",
									"}\r",
									"\r",
									"// check if history_item_type is defined in body\r",
									"if (pm.request.body.urlencoded.has('history_item_type')) return\r",
									"\r",
									"// if no history_item_type defined in body\r",
									"// get a random history type and add to form body\r",
									"\r",
									"const updateRequestBeforeTest = () => {\r",
									"    let history_item_types = pm.environment.replaceIn('{{history_item_types}}').split('|')\r",
									"    let randomIndex = range(0, history_item_types.length)\r",
									"\r",
									"    pm.request.body.urlencoded.add({\r",
									"        key: 'history_item_type',\r",
									"        value: history_item_types[randomIndex]\r",
									"    })\r",
									"}\r",
									"\r",
									"updateRequestBeforeTest()"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "history_item_name",
									"value": "createHistoryItemName-{{$randomAdjective}}-{{$timestamp}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}/historyItem",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error missing body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect } = pm\r",
									"\r",
									"test('should have status code 400', () => {\r",
									"    response.to.have.status(400)\r",
									"})\r",
									"\r",
									"test('should have message property in response body', () => {\r",
									"    expect(response.json()).to.have.property('message')\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/historyItem",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error missing history_item_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect } = pm\r",
									"\r",
									"test('should have status code 400', () => {\r",
									"    response.to.have.status(400)\r",
									"})\r",
									"\r",
									"test('should have message property in response body', () => {\r",
									"    expect(response.json()).to.have.property('message')\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "history_item_type",
									"value": "string",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}/historyItem",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error missing history_item_type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect } = pm\r",
									"\r",
									"test('should have status code 400', () => {\r",
									"    response.to.have.status(400)\r",
									"})\r",
									"\r",
									"test('should have message property in response body', () => {\r",
									"    expect(response.json()).to.have.property('message')\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "history_item_name",
									"value": "missing type",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}/historyItem",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT history_item",
			"item": [
				{
					"name": "Update history item name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect, sendRequest } = pm\r",
									"\r",
									"const getUrlencodedValue = (urlencodedData, key) => {\r",
									"    let { value } = urlencodedData.filter(item => item.key === key).pop()\r",
									"    return value\r",
									"}\r",
									"\r",
									"test('should have status code 200', () => {\r",
									"    response.to.have.status(200)\r",
									"})\r",
									"\r",
									"test('should have id and history_item_name in response body', () => {\r",
									"    expect(response.json()).to.have.property('id')\r",
									"    expect(response.json()).to.have.property('history_item_name')\r",
									"    expect(response.json()).to.have.property('history_item_type')\r",
									"})\r",
									"\r",
									"test('get single history_item api should respond with updated history_item', () => {\r",
									"    let apiUrl = pm.environment.replaceIn('{{apiUrl}}')\r",
									"    let updatedHistoryItemId = pm.request.url.path.pop()\r",
									"    \r",
									"    sendRequest(`${apiUrl}/historyItem/${updatedHistoryItemId}`, (error, testResponse) => {\r",
									"        if (error) console.log(error)\r",
									"\r",
									"        let request_history_item_name = getUrlencodedValue(pm.request.body.urlencoded, 'history_item_name')\r",
									"\r",
									"        expect(testResponse).to.have.property('code', 200)\r",
									"        expect(testResponse.json()).to.have.property('history_item_name')\r",
									"        expect(testResponse.json().history_item_name).to.be.eq(request_history_item_name)\r",
									"    })\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "history_item_name",
									"value": "updateHistoryItemName-{{$randomAdjective}}-{{$timestamp}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiUrl}}/historyItem/updateName/{{test_history_item_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem",
								"updateName",
								"{{test_history_item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error missing history_item_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect } = pm\r",
									"\r",
									"test('should have status code 400', () => {\r",
									"    response.to.have.status(400)\r",
									"})\r",
									"\r",
									"test('should have message property in response body', () => {\r",
									"    expect(response.json()).to.have.property('message')\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/historyItem/updateName/{{test_history_item_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem",
								"updateName",
								"{{test_history_item_id}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update history item type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect, sendRequest } = pm\r",
									"\r",
									"const getUrlencodedValue = (urlencodedData, key) => {\r",
									"    let { value } = urlencodedData.filter(item => item.key === key).pop()\r",
									"    return value\r",
									"}\r",
									"\r",
									"test('should have status code 200', () => {\r",
									"    response.to.have.status(200)\r",
									"})\r",
									"\r",
									"test('should have id and history_item_name in response body', () => {\r",
									"    expect(response.json()).to.have.property('id')\r",
									"    expect(response.json()).to.have.property('history_item_name')\r",
									"    expect(response.json()).to.have.property('history_item_type')\r",
									"})\r",
									"\r",
									"test('get single history_item api should respond with updated history_item', () => {\r",
									"    let apiUrl = pm.environment.replaceIn('{{apiUrl}}')\r",
									"    let updatedHistoryItemId = pm.request.url.path.pop()\r",
									"    \r",
									"    sendRequest(`${apiUrl}/historyItem/${updatedHistoryItemId}`, (error, testResponse) => {\r",
									"        if (error) console.log(error)\r",
									"\r",
									"        let request_history_item_type = getUrlencodedValue(pm.request.body.urlencoded, 'history_item_type')\r",
									"\r",
									"        expect(testResponse).to.have.property('code', 200)\r",
									"        expect(testResponse.json()).to.have.property('history_item_name')\r",
									"        expect(testResponse.json().history_item_type).to.be.eq(request_history_item_type)\r",
									"    })\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const range = (min, max) => {\r",
									"    return Math.floor(Math.random() * (max - min) + min)\r",
									"}\r",
									"\r",
									"// check if history_item_type is defined in body\r",
									"if (pm.request.body.urlencoded.has('history_item_type')) return\r",
									"\r",
									"// if no history_item_type defined in body\r",
									"// get a random history type and add to form body\r",
									"\r",
									"const updateRequestBeforeTest = () => {\r",
									"    let history_item_types = pm.environment.replaceIn('{{history_item_types}}').split('|')\r",
									"    let randomIndex = range(0, history_item_types.length)\r",
									"\r",
									"    pm.request.body.urlencoded.add({\r",
									"        key: 'history_item_type',\r",
									"        value: history_item_types[randomIndex]\r",
									"    })\r",
									"}\r",
									"\r",
									"updateRequestBeforeTest()"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{apiUrl}}/historyItem/updateType/{{test_history_item_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem",
								"updateType",
								"{{test_history_item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error missing history_item_name Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect } = pm\r",
									"\r",
									"test('should have status code 400', () => {\r",
									"    response.to.have.status(400)\r",
									"})\r",
									"\r",
									"test('should have message property in response body', () => {\r",
									"    expect(response.json()).to.have.property('message')\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/historyItem/updateType/{{test_history_item_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem",
								"updateType",
								"{{test_history_item_id}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE history_item",
			"item": [
				{
					"name": "Delete history item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect, sendRequest } = pm\r",
									"\r",
									"test('should have status code 200', () => {\r",
									"    response.to.have.status(200)\r",
									"})\r",
									"\r",
									"test('should have message property in response body', () => {\r",
									"    expect(response.json()).to.have.property('message')\r",
									"})\r",
									"\r",
									"test('get single tag api shound not find deleted tag', () => {\r",
									"    let apiUrl = pm.environment.replaceIn('{{apiUrl}}')\r",
									"    let deletedHistoryItemId = pm.request.url.path.pop()\r",
									"    \r",
									"    sendRequest(`${apiUrl}/historyItem/${deletedHistoryItemId}`, (error, testResponse) => {\r",
									"        if (error) console.log(error)\r",
									"\r",
									"        expect(testResponse).to.have.property('code', 404)\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/historyItem/{{test_history_item_id}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem",
								"{{test_history_item_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error missing history item id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { response, test, expect } = pm\r",
									"\r",
									"test('should have status code 404', () => {\r",
									"    response.to.have.status(404)\r",
									"})\r",
									"\r",
									"test('should have message property in response body', () => {\r",
									"    expect(response.json()).to.have.property('message')\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/historyItem/",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"historyItem",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all history items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const { response, test, expect } = pm\r",
							"\r",
							"test('should have status code 200', () => {\r",
							"    response.to.have.status(200)\r",
							"})\r",
							"\r",
							"test('should have greater than or equal to zero data length', () => {\r",
							"    expect(response.json().length >= 0).to.satisfy(num => {\r",
							"        return (num >= 0) ? true : false\r",
							"    })\r",
							"})\r",
							"\r",
							"test('response body should be an array', () => {\r",
							"    expect(Array.isArray(response.json())).to.be.true\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/historyItem",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"historyItem"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single history item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const { response, test, expect } = pm\r",
							"\r",
							"test('should have status code 200', () => {\r",
							"    response.to.have.status(200)\r",
							"})\r",
							"\r",
							"test('should have property of id, history_item_name, and history_item_type', () => {\r",
							"    let data = response.json()\r",
							"    expect(data).to.have.property('id')\r",
							"    expect(data).to.have.property('history_item_name')\r",
							"    expect(data).to.have.property('history_item_type')\r",
							"})\r",
							"\r",
							"test('response body should be an object', () => {\r",
							"    let data = response.json()\r",
							"    expect(\r",
							"        typeof data === 'object' && \r",
							"        !Array.isArray(data) && \r",
							"        data !== null\r",
							"    ).to.be.true\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/historyItem/1",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"historyItem",
						"1"
					]
				}
			},
			"response": []
		}
	]
}